// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=internal/service/mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	domain "github.com/kostylevdev/todo-rest-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAutorization is a mock of Autorization interface.
type MockAutorization struct {
	ctrl     *gomock.Controller
	recorder *MockAutorizationMockRecorder
}

// MockAutorizationMockRecorder is the mock recorder for MockAutorization.
type MockAutorizationMockRecorder struct {
	mock *MockAutorization
}

// NewMockAutorization creates a new mock instance.
func NewMockAutorization(ctrl *gomock.Controller) *MockAutorization {
	mock := &MockAutorization{ctrl: ctrl}
	mock.recorder = &MockAutorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutorization) EXPECT() *MockAutorizationMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockAutorization) Refresh(refreshToken, IP string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", refreshToken, IP)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAutorizationMockRecorder) Refresh(refreshToken, IP any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAutorization)(nil).Refresh), refreshToken, IP)
}

// SignIn mocks base method.
func (m *MockAutorization) SignIn(clientIP string, signinuser domain.SignInUserInput) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", clientIP, signinuser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAutorizationMockRecorder) SignIn(clientIP, signinuser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAutorization)(nil).SignIn), clientIP, signinuser)
}

// SignUp mocks base method.
func (m *MockAutorization) SignUp(user domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAutorizationMockRecorder) SignUp(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAutorization)(nil).SignUp), user)
}

// MockTodoList is a mock of TodoList interface.
type MockTodoList struct {
	ctrl     *gomock.Controller
	recorder *MockTodoListMockRecorder
}

// MockTodoListMockRecorder is the mock recorder for MockTodoList.
type MockTodoListMockRecorder struct {
	mock *MockTodoList
}

// NewMockTodoList creates a new mock instance.
func NewMockTodoList(ctrl *gomock.Controller) *MockTodoList {
	mock := &MockTodoList{ctrl: ctrl}
	mock.recorder = &MockTodoListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoList) EXPECT() *MockTodoListMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockTodoList) CreateList(userID int, list domain.TodoListCreate) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", userID, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockTodoListMockRecorder) CreateList(userID, list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockTodoList)(nil).CreateList), userID, list)
}

// DeleteList mocks base method.
func (m *MockTodoList) DeleteList(userID, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockTodoListMockRecorder) DeleteList(userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockTodoList)(nil).DeleteList), userID, id)
}

// GetAllLists mocks base method.
func (m *MockTodoList) GetAllLists(userID int) ([]domain.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLists", userID)
	ret0, _ := ret[0].([]domain.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLists indicates an expected call of GetAllLists.
func (mr *MockTodoListMockRecorder) GetAllLists(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLists", reflect.TypeOf((*MockTodoList)(nil).GetAllLists), userID)
}

// GetListById mocks base method.
func (m *MockTodoList) GetListById(userID, id int) (domain.TodoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListById", userID, id)
	ret0, _ := ret[0].(domain.TodoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListById indicates an expected call of GetListById.
func (mr *MockTodoListMockRecorder) GetListById(userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListById", reflect.TypeOf((*MockTodoList)(nil).GetListById), userID, id)
}

// UpdateList mocks base method.
func (m *MockTodoList) UpdateList(userID, id int, list domain.TodoListUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", userID, id, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockTodoListMockRecorder) UpdateList(userID, id, list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockTodoList)(nil).UpdateList), userID, id, list)
}

// MockTodoItem is a mock of TodoItem interface.
type MockTodoItem struct {
	ctrl     *gomock.Controller
	recorder *MockTodoItemMockRecorder
}

// MockTodoItemMockRecorder is the mock recorder for MockTodoItem.
type MockTodoItemMockRecorder struct {
	mock *MockTodoItem
}

// NewMockTodoItem creates a new mock instance.
func NewMockTodoItem(ctrl *gomock.Controller) *MockTodoItem {
	mock := &MockTodoItem{ctrl: ctrl}
	mock.recorder = &MockTodoItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoItem) EXPECT() *MockTodoItemMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockTodoItem) CreateItem(userID, listID int, item domain.TodoItemCreate) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", userID, listID, item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockTodoItemMockRecorder) CreateItem(userID, listID, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockTodoItem)(nil).CreateItem), userID, listID, item)
}

// DeleteItem mocks base method.
func (m *MockTodoItem) DeleteItem(userID, itemId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", userID, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockTodoItemMockRecorder) DeleteItem(userID, itemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockTodoItem)(nil).DeleteItem), userID, itemId)
}

// GetAllItems mocks base method.
func (m *MockTodoItem) GetAllItems(userID, listID int) ([]domain.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems", userID, listID)
	ret0, _ := ret[0].([]domain.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockTodoItemMockRecorder) GetAllItems(userID, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockTodoItem)(nil).GetAllItems), userID, listID)
}

// GetItemById mocks base method.
func (m *MockTodoItem) GetItemById(userID, itemId int) (domain.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", userID, itemId)
	ret0, _ := ret[0].(domain.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockTodoItemMockRecorder) GetItemById(userID, itemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockTodoItem)(nil).GetItemById), userID, itemId)
}

// UpdateItem mocks base method.
func (m *MockTodoItem) UpdateItem(userID, itemId int, item domain.TodoItemUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", userID, itemId, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockTodoItemMockRecorder) UpdateItem(userID, itemId, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockTodoItem)(nil).UpdateItem), userID, itemId, item)
}
